<?php

/* 
 * Copyright (C) 2015 Kévin Grenèche < kevin.greneche at openhivemanager.org >
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace KG\BeekeepingManagementBundle\Controller;

use KG\BeekeepingManagementBundle\Entity\Exploitation;
use KG\BeekeepingManagementBundle\Entity\ApiculteurExploitation;
use KG\BeekeepingManagementBundle\Form\Type\ExploitationType;
use KG\BeekeepingManagementBundle\Form\Type\ChangeExploitationType;
use KG\BeekeepingManagementBundle\Form\Type\ApiculteurExploitationType;
use KG\BeekeepingManagementBundle\Form\Type\UpdateApiculteurExploitationType;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;

class ExploitationController extends Controller
{    
    /**
    * @Security("has_role('ROLE_USER')")
    */    
    public function addAction(Request $request)
    { 
        if( !$this->getUser()->getApiculteurExploitations()->isEmpty() ){
            throw new NotFoundHttpException('Page inexistante.');
        } 
        
        $exploitation = new Exploitation();
        $form = $this->createForm(new ExploitationType, $exploitation);
        
        if ($form->handleRequest($request)->isValid()){
            
            //Récupération du statut "Accepté"
            $statut = $this->getDoctrine()->getManager()->getRepository('KGBeekeepingManagementBundle:Statut')->findOneByLibelle('Accepté');        
            
            //Récupération de l'id du rôle "Responsable"
            $role = $this->getDoctrine()->getManager()->getRepository('KGBeekeepingManagementBundle:Role')->findOneByLibelle('Responsable');          
            
            //Ajout de l'utilisateur courant comme responsable de cette nouvelle exploitation
            $apiculteurExploitation = new ApiculteurExploitation($this->getUser(), $exploitation, $role, $statut);
            $exploitation->addApiculteurExploitation($apiculteurExploitation);
                            
            //Récupération du manager
            $em = $this->getDoctrine()->getManager();
            
            //Persistence de l'exploitation
            $em->persist($exploitation);
            
            //Sauvegarde
            $em->flush();
        
            $flash = $this->get('braincrafted_bootstrap.flash');
            $flash->success('Exploitation créée avec succès');
        
            return $this->redirect($this->generateUrl('kg_beekeeping_management_home'));
        }

        return $this->render('KGBeekeepingManagementBundle:Exploitation:add.html.twig', array('form' => $form->createView()));
    }

    /**
    * @Security("has_role('ROLE_USER')")
    * @ParamConverter("exploitation", options={"mapping": {"exploitation_id" : "id"}}) 
    */    
    public function updateAction(Exploitation $exploitation, Request $request)
    {       
        if( !$this->getUser()->isResponsable($exploitation)){
            throw new NotFoundHttpException('Page inexistante.');
        }
        
        $form = $this->createForm(new ExploitationType, $exploitation);
        
        if ($form->handleRequest($request)->isValid()){
                                      
            //Récupération du manager
            $em = $this->getDoctrine()->getManager();
            
            //Persistence de l'exploitation
            $em->persist($exploitation);
            
            //Sauvegarde
            $em->flush();
        
            $flash = $this->get('braincrafted_bootstrap.flash');
            $flash->success('Exploitation mise à jour avec succès');
        
            return $this->redirect($this->generateUrl('kg_beekeeping_management_view_exploitation', array('exploitation_id' => $exploitation->getId())));
        }

        return $this->render('KGBeekeepingManagementBundle:Exploitation:update.html.twig', 
                                array(
                                    'form'         => $form->createView(),
                                    'exploitation' => $exploitation
                                ));
    }    
    
    /**
    * @Security("has_role('ROLE_USER')")
    * @ParamConverter("exploitation", options={"mapping": {"exploitation_id" : "id"}}) 
    */    
    public function deleteAction(Exploitation $exploitation)
    {      
        if( !$this->getUser()->isResponsable($exploitation) ){
            throw new NotFoundHttpException('Page inexistante.');
        }        
        
        $em = $this->getDoctrine()->getManager();
        $em->remove($exploitation);
        $em->flush();

        $flash = $this->get('braincrafted_bootstrap.flash');
        $flash->success('Exploitaiton supprimée avec succès');
        
        return $this->redirect($this->generateUrl('kg_beekeeping_management_home'));        
    }    
    
    /**
    * @Security("has_role('ROLE_USER')")
    * @ParamConverter("exploitation", options={"mapping": {"exploitation_id" : "id"}})  
    */
    public function viewAction(Exploitation $exploitation)
    {   
        if( !$this->getUser()->canDisplayExploitation($exploitation) ){
            throw new NotFoundHttpException('Page inexistante.');
        }   
        
        return $this->render('KGBeekeepingManagementBundle:Exploitation:view.html.twig', 
                array(  'exploitation' => $exploitation ));             
    }  
    
    /**
    * @Security("has_role('ROLE_USER')")
    */
    public function viewFirstAction()
    {   
        if( !$this->getUser()->getApiculteurExploitations()->isEmpty() ){
            $exploitation = $this->getUser()->getApiculteurExploitations()->first()->getExploitation();
       
            return $this->render('KGBeekeepingManagementBundle:Exploitation:view.html.twig', 
                    array(  'exploitation' => $exploitation ));            
        }
        else{
            return $this->redirect($this->generateUrl('kg_beekeeping_management_add_exploitation'));
        }        
    }     
    
    /**
    * @Security("has_role('ROLE_USER')")
    * @ParamConverter("exploitation", options={"mapping": {"exploitation_id" : "id"}}) 
    */    
    public function addCollabAction(Request $request, Exploitation $exploitation)
    { 
        if( !$this->getUser()->isResponsable($exploitation)){
            throw new NotFoundHttpException('Page inexistante.');
        } 
        
        //Récupération du statut "En attente"
        $statut = $this->getDoctrine()->getManager()->getRepository('KGBeekeepingManagementBundle:Statut')->findOneByLibelle("En attente"); 
            
        $apiculteurExploitation = new ApiculteurExploitation( null, $exploitation, null, $statut );
        $form = $this->createForm(new ApiculteurExploitationType, $apiculteurExploitation);
        
        if ($form->handleRequest($request)->isValid()){   
                             
            //Récupération du mail du collaborateur
            $email = $form->get('mail')->getData();
            
            //Instanciation du collaborateur
            $collaborateur = $this->getDoctrine()->getManager()->getRepository('KGUserBundle:User')->findOneByEmail($email);
            
            //Affectation du collaborateur
            $apiculteurExploitation->setApiculteur($collaborateur);
            
            //Récupération du manager
            $em = $this->getDoctrine()->getManager();
            
            //Persistence du collaborateur
            $em->persist($apiculteurExploitation);
            
            //Sauvegarde
            $em->flush();
        
            $flash = $this->get('braincrafted_bootstrap.flash');
            $flash->success("L'invitation a été envoyée au collaborateur");
        
            return $this->redirect($this->generateUrl('kg_beekeeping_management_view_exploitation', array('exploitation_id' => $exploitation->getId())));
        }

        return $this->render('KGBeekeepingManagementBundle:Collaborateur:add.html.twig', 
                             array('form'         => $form->createView(),
                                   'exploitation' => $exploitation 
                            ));
    }   
    
    /**
    * @Security("has_role('ROLE_USER')")
    * @ParamConverter("apiculteurExploitation", options={"mapping": {"apiculteurExploitation_id" : "id"}}) 
    */    
    public function deleteCollabAction(ApiculteurExploitation $apiculteurExploitation)
    {      
        if( (    !$this->getUser()->isResponsable($apiculteurExploitation->getExploitation()) 
              && $apiculteurExploitation->getApiculteur()->getId() != $this->getUser()->getId()
             )
            || !$apiculteurExploitation->canBeDeleted() ){
            throw new NotFoundHttpException('Page inexistante.');
        }        
        
        $em = $this->getDoctrine()->getManager();
        $em->remove($apiculteurExploitation);
        $em->flush();

        $flash = $this->get('braincrafted_bootstrap.flash');
        $flash->success('Collaboration supprimée avec succès');
        
        return $this->redirect($this->generateUrl('kg_beekeeping_management_home'));
    }       
    
     /**
    * @Security("has_role('ROLE_USER')")
    * @ParamConverter("apiculteurExploitation", options={"mapping": {"apiculteurExploitation_id" : "id"}})  
    */    
    public function updateCollabAction(ApiculteurExploitation $apiculteurExploitation, Request $request)
    {       
        if( !$apiculteurExploitation->canBeUpdated($this->getUser())){
            throw new NotFoundHttpException('Page inexistante.');
        }
        
        $form = $this->createForm(new UpdateApiculteurExploitationType, $apiculteurExploitation);
        
        if ($form->handleRequest($request)->isValid()){
                                      
            //Récupération du manager
            $em = $this->getDoctrine()->getManager();
            
            //Persistence de l'exploitation
            $em->persist($apiculteurExploitation);
            
            //Sauvegarde
            $em->flush();
        
            $flash = $this->get('braincrafted_bootstrap.flash');
            $flash->success('Collaboration mise à jour avec succès');
        
            return $this->redirect($this->generateUrl('kg_beekeeping_management_view_exploitation', array('exploitation_id' => $apiculteurExploitation->getExploitation()->getId())));
        }

        return $this->render('KGBeekeepingManagementBundle:Collaborateur:update.html.twig', 
                                array(
                                    'form'                   => $form->createView(),
                                    'apiculteurExploitation' => $apiculteurExploitation
                                ));
    }   
    
     /**
    * @Security("has_role('ROLE_USER')")
    * @ParamConverter("apiculteurExploitation", options={"mapping": {"apiculteurExploitation_id" : "id"}})  
    */    
    public function accepterCollabAction(ApiculteurExploitation $apiculteurExploitation)
    {       
        if(    !$this->getUser()->canDisplayExploitation($apiculteurExploitation->getExploitation())
            || !$apiculteurExploitation->getStatut()->getLibelle() == 'En attente'){
            throw new NotFoundHttpException('Page inexistante.');
        }
        
        //Récupération du manager
        $em = $this->getDoctrine()->getManager();
        
        //Récupération du statut "Accepté"
        $statut = $this->getDoctrine()->getManager()->getRepository('KGBeekeepingManagementBundle:Statut')->findOneByLibelle('Accepté');    
            
        //Changement de statut de l'invitation à "Accepté"
        $apiculteurExploitation->setStatut($statut);
                    
        //Persistence de l'exploitation
        $em->persist($apiculteurExploitation);

        //Sauvegarde
        $em->flush();

        $flash = $this->get('braincrafted_bootstrap.flash');
        $flash->success('Collaboration acceptée avec succès');

        return $this->redirect($this->generateUrl('kg_beekeeping_management_view_exploitation', array('exploitation_id' => $apiculteurExploitation->getExploitation()->getId())));
    }      
}