<?php

namespace KG\BeekeepingManagementBundle\Controller;

use KG\BeekeepingManagementBundle\Entity\Exploitation;
use KG\BeekeepingManagementBundle\Entity\ApiculteurExploitation;
use KG\BeekeepingManagementBundle\Form\ExploitationType;
use KG\BeekeepingManagementBundle\Form\ChangeExploitationType;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;

class ExploitationController extends Controller
{
    /**
    * @Security("has_role('ROLE_USER')")
    * @ParamConverter("exploitation", options={"mapping": {"exploitation_id" : "id"}}) 
    */
    public function viewRucherAction(Exploitation $exploitation, $page)
    {        
        $not_permitted = true;
        
        foreach ( $exploitation->getApiculteurExploitations() as $apiculteurExploitation ){
            if( $apiculteurExploitation->getApiculteur()->getId() == $this->getUser()->getId() ){
                $not_permitted = false;
                break;
            }
        }
        
        if( $not_permitted || $page < 1 || $exploitation->getSupprime() ){
            throw new NotFoundHttpException('Page inexistante.');
        }
       
        $maxRuchers     = $this->container->getParameter('max_ruchers_per_page');
        $ruchers        = $this->getDoctrine()->getRepository('KGBeekeepingManagementBundle:Rucher')->getListByExploitation($page, $maxRuchers, $exploitation->getId());
        $ruchers_count  = $this->getDoctrine()->getRepository('KGBeekeepingManagementBundle:Rucher')->countByExploitation($exploitation->getId()); 
        
        $pagination = array(
            'page'         => $page,
            'route'        => 'kg_beekeeping_management_view_exploitation',
            'pages_count'  => max ( ceil($ruchers_count / $maxRuchers), 1),
            'route_params' => array('exploitation_id' => $exploitation->getId())
        );
             
        return $this->render('KGBeekeepingManagementBundle:Exploitation:view.html.twig', 
                array(  'exploitation' => $exploitation,
                        'ruchers'      => $ruchers,
                        'nbRuchers'    => $ruchers_count,
                        'pagination'   => $pagination));
    }

    /**
    * @Security("has_role('ROLE_USER')")
    * @ParamConverter("exploitation", options={"mapping": {"exploitation_id" : "id"}}) 
    */
    public function viewColonnieAction(Exploitation $exploitation, $page)
    {        
        $not_permitted = true;
        
        foreach ( $exploitation->getApiculteurExploitations() as $apiculteurExploitation ){
            if( $apiculteurExploitation->getApiculteur()->getId() == $this->getUser()->getId() ){
                $not_permitted = false;
                break;
            }
        }
        
        if( $not_permitted || $page < 1 || $exploitation->getSupprime() ){
            throw new NotFoundHttpException('Page inexistante.');
        }
       
        $maxColonnies     = $this->container->getParameter('max_colonnies_per_page');
        $colonnies        = $this->getDoctrine()->getRepository('KGBeekeepingManagementBundle:Colonnie')->getListByExploitation($page, $maxColonnies, $exploitation->getId());
        $colonnies_count  = $this->getDoctrine()->getRepository('KGBeekeepingManagementBundle:Colonnie')->countByExploitation($exploitation->getId()); 
        
        $pagination = array(
            'page'         => $page,
            'route'        => 'kg_beekeeping_management_view_exploitation_colonnie',
            'pages_count'  => max ( ceil($colonnies_count / $maxColonnies), 1),
            'route_params' => array('exploitation_id' => $exploitation->getId())
        );
             
        return $this->render('KGBeekeepingManagementBundle:Exploitation:viewColonnie.html.twig', 
                array(  'exploitation' => $exploitation,
                        'colonnies'    => $colonnies,
                        'nbColonnies'  => $colonnies_count,
                        'pagination'   => $pagination));
    }

    /**
    * @Security("has_role('ROLE_USER')")
    * @ParamConverter("exploitation", options={"mapping": {"exploitation_id" : "id"}}) 
    */
    public function viewRucheAction(Exploitation $exploitation, $page)
    {        
        $not_permitted = true;
        
        foreach ( $exploitation->getApiculteurExploitations() as $apiculteurExploitation ){
            if( $apiculteurExploitation->getApiculteur()->getId() == $this->getUser()->getId() ){
                $not_permitted = false;
                break;
            }
        }
        
        if( $not_permitted || $page < 1 || $exploitation->getSupprime() ){
            throw new NotFoundHttpException('Page inexistante.');
        }
       
        $maxRuches     = $this->container->getParameter('max_ruches_per_page');
        $ruches        = $this->getDoctrine()->getRepository('KGBeekeepingManagementBundle:Ruche')->getListByExploitation($page, $maxRuches, $exploitation->getId());
        $ruches_count  = $this->getDoctrine()->getRepository('KGBeekeepingManagementBundle:Ruche')->countByExploitation($exploitation->getId()); 
        
        $pagination = array(
            'page'         => $page,
            'route'        => 'kg_beekeeping_management_view_exploitation_ruche',
            'pages_count'  => max ( ceil($ruches_count / $maxRuches), 1),
            'route_params' => array('exploitation_id' => $exploitation->getId())
        );
             
        return $this->render('KGBeekeepingManagementBundle:Exploitation:viewRuche.html.twig', 
                array(  'exploitation' => $exploitation,
                        'ruches'       => $ruches,
                        'nbRuches'     => $ruches_count,
                        'pagination'   => $pagination));
    }
    
    /**
    * @Security("has_role('ROLE_USER')")
    */    
    public function addAction(Request $request)
    {
        $exploitation = new Exploitation();
        $form = $this->createForm(new ExploitationType, $exploitation);
        
        if ($form->handleRequest($request)->isValid()){
            
            //Ajout de l'utilisateur courant comme responsable de cette nouvelle exploitation
            $apiculteurExploitation = new ApiculteurExploitation($this->getUser(), $exploitation, true);
            $exploitation->addApiculteurExploitation($apiculteurExploitation);
                            
            //Récupération du manager
            $em = $this->getDoctrine()->getManager();
            
            //Persistence de l'exploitation
            $em->persist($exploitation);
            
            //Sauvegarde
            $em->flush();
        
            $request->getSession()->getFlashBag()->add('success','Exploitation créée avec succès');
        
            return $this->redirect($this->generateUrl('kg_beekeeping_management_view_exploitation', array('exploitation_id' => $exploitation->getId())));
        }

        return $this->render('KGBeekeepingManagementBundle:Exploitation:add.html.twig', array('form' => $form->createView()));
    }

    /**
    * @Security("has_role('ROLE_USER')")
    * @ParamConverter("exploitation", options={"mapping": {"exploitation_id" : "id"}}) 
    */    
    public function updateAction(Exploitation $exploitation, Request $request)
    {
        $form = $this->createForm(new ExploitationType, $exploitation);
        
        if ($form->handleRequest($request)->isValid()){
                                      
            //Récupération du manager
            $em = $this->getDoctrine()->getManager();
            
            //Persistence de l'exploitation
            $em->persist($exploitation);
            
            //Sauvegarde
            $em->flush();
        
            $request->getSession()->getFlashBag()->add('success','Exploitation mise à jour avec succès');
        
            return $this->redirect($this->generateUrl('kg_beekeeping_management_view_exploitation', array('exploitation_id' => $exploitation->getId())));
        }

        return $this->render('KGBeekeepingManagementBundle:Exploitation:update.html.twig', 
                                array(
                                    'form'         => $form->createView(),
                                    'exploitation' => $exploitation
                                ));
    }    
    
    /**
    * @Security("has_role('ROLE_USER')")
    * @ParamConverter("exploitation", options={"mapping": {"exploitation_id" : "id"}}) 
    */    
    public function deleteAction(Exploitation $exploitation)
    {
        $apiculteurExploitations = $exploitation->getApiculteurExploitations();
        $not_permitted = true;
        
        foreach ( $apiculteurExploitations as $apiculteurExploitation ){
            if( $apiculteurExploitation->getApiculteur()->getId() == $this->getUser()->getId() ){
                $not_permitted = false;
                break;
            }
        }
        
        if( $not_permitted || $exploitation->getSupprime() ){
            throw new NotFoundHttpException('Page inexistante.');
        }
    
        $exploitation->setSupprime(true);
        
        foreach ( $exploitation->getRuchers() as $rucher ){
            $rucher->setSupprime(true);
        }

        foreach ( $exploitation->getRuches() as $ruche ){
            $ruche->setSupprime(true);
        }        

        foreach ( $exploitation->getColonnies() as $colonnie ){
            $colonnie->setSupprime(true);            
        }               
        
        $em = $this->getDoctrine()->getManager();
        $em->persist($exploitation);
        $em->flush();

        $this->get('session')->getFlashBag()->add('success','Exploitaiton supprimée avec succès');
        return $this->redirect($this->generateUrl('kg_beekeeping_management_home'));        
    }    
}