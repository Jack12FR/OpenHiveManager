<?php

/* 
 * Copyright (C) 2015 Kévin Grenèche < kevin.greneche at openhivemanager.org >
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace KG\BeekeepingManagementBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TacheRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TacheRepository extends EntityRepository
{
    public function getAllListByColonie($colonie)
    {
        return $this->createQueryBuilder('tache')
                    ->leftJoin('tache.colonie','colonie')
                    ->leftJoin('tache.visite','visite')
                    ->where('colonie.id = :id')
                    ->setParameter('id',$colonie->getId())
                    ->getQuery();
    }   

    public function getListByExploitation($exploitation)
    {
        return $this->createQueryBuilder('tache')
                    ->leftJoin('tache.colonie','colonie')
                    ->leftJoin('colonie.ruche','ruche')
                    ->leftJoin('ruche.rucher','rucher')
                    ->leftJoin('rucher.exploitation','exploitation')
                    ->leftJoin('tache.visite','visite')
                    ->where('exploitation.id = :id')
                    ->andWhere('visite is NULL')
                    ->setParameter('id',$exploitation->getId())
                    ->getQuery();
    }   
    
    public function getListUrgentesByExploitation($exploitation)
    {
        return $this->createQueryBuilder('tache')
                    ->leftJoin('tache.colonie','colonie')
                    ->leftJoin('colonie.ruche','ruche')
                    ->leftJoin('ruche.rucher','rucher')
                    ->leftJoin('rucher.exploitation','exploitation')
                    ->leftJoin('tache.visite','visite')
                    ->where('exploitation.id = :id')
                    ->andWhere('visite is NULL')
                    ->andWhere('tache.date < :today')
                    ->setParameter('id',$exploitation->getId())
                    ->setParameter('today', new \DateTime())
                    ->getQuery();
    }     
    
    public function getListByColonie($colonie, $visite = null)
    {
        $result = $this->createQueryBuilder('tache')
                    ->leftJoin('tache.colonie','colonie')
                    ->leftJoin('tache.visite','visite')
                    ->where('colonie.id = :colonieid');
        
        if( $visite ){
            $result->andWhere('visite is NULL OR visite.id = :visiteid')
                   ->setParameter('visiteid',$visite->getId());
        }
        else{
            $result->andWhere('visite is NULL');
        }
        
        $result->setParameter('colonieid',$colonie->getId());
                
        return $result->getQuery();        
    }       
}
