<?php

namespace KG\BeekeepingManagementBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * EmplacementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmplacementRepository extends EntityRepository
{
    public function getListByRucher($page=1, $maxperpage=10, $rucher)
    {
        $q = $this->createQueryBuilder('emplacement')
                  ->leftJoin('emplacement.rucher','rucher')               
                  ->addSelect('rucher')
                  ->where('rucher.id = :id')
                  ->andWhere('emplacement.supprime = false')    
                  ->setParameter('id',$rucher);
        
        $q->setFirstResult(($page-1)*$maxperpage)
          ->setMaxResults($maxperpage);
        
        return new Paginator($q);
    }
    
    public function countByRucher($rucher)
    {
        return $this->createQueryBuilder('emplacement')
                    ->select('COUNT(emplacement)')
                    ->leftJoin('emplacement.rucher','rucher')
                    ->where('rucher.id = :id')
                    ->andWhere('emplacement.supprime = false')                
                    ->setParameter('id',$rucher)
                    ->getQuery()
                    ->getSingleScalarResult();
    }   

    public function queryfindByRucherId($rucher)
    {
        return $this->createQueryBuilder('emplacement')
                    ->leftJoin('emplacement.rucher', 'rucher')
                    ->addSelect('rucher')
                    ->where('rucher.id = :rucher')
                    ->andWhere('emplacement.supprime = false')                   
                    ->setParameter('rucher',$rucher);
    }

    public function findByRucherId($rucher)
    {
        return $this->queryfindByRucherId($rucher)
                    ->leftJoin('emplacement.ruche', 'ruche')
                    ->addSelect('ruche')
                    ->andWhere('ruche.emplacement is NULL')
                    ->getQuery()
                    ->getArrayResult();
    }    
}
