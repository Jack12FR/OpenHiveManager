<?php

/* 
 * Copyright (C) 2015 Kévin Grenèche < kevin.greneche at openhivemanager.org >
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace KG\BeekeepingManagementBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use KG\BeekeepingManagementBundle\Entity\Rucher;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

/**
 * Exploitation
 *
 * @ORM\Table()
 * @ORM\Entity(repositoryClass="KG\BeekeepingManagementBundle\Entity\ExploitationRepository")
 * @UniqueEntity(fields="nom", message="Une exploitation existe déjà avec ce nom")
 */
class Exploitation
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="nom", type="string", length=25)
     * @Assert\NotBlank(message="Veuillez remplir le nom de l'exploitation")
     * @Assert\Length(max=25, maxMessage="Le nom de l'exploitation ne peut dépasser {{ limit }} caractères") 
     */
    private $nom;

    /**
     * @ORM\OneToMany(targetEntity="KG\BeekeepingManagementBundle\Entity\ApiculteurExploitation", mappedBy="exploitation", cascade={"persist","remove"}, orphanRemoval=true)
     */
    private $apiculteurExploitations;    

    /**
     * @ORM\OneToMany(targetEntity="KG\BeekeepingManagementBundle\Entity\Rucher", mappedBy="exploitation", cascade={"remove"}, orphanRemoval=true)
     */
    private $ruchers;        
    
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->apiculteurExploitations = new \Doctrine\Common\Collections\ArrayCollection();
        $this->ruchers = new \Doctrine\Common\Collections\ArrayCollection();
    }
    
    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set nom
     *
     * @param string $nom
     * @return Exploitation
     */
    public function setNom($nom)
    {
        $this->nom = $nom;

        return $this;
    }

    /**
     * Get nom
     *
     * @return string 
     */
    public function getNom()
    {
        return $this->nom;
    }
    
    /**
     * Add apiculteurExploitations
     *
     * @param ApiculteurExploitation $apiculteurExploitation
     * @return Exploitation
     */
    public function addApiculteurExploitation(ApiculteurExploitation $apiculteurExploitation)
    {
        $this->apiculteurExploitations[] = $apiculteurExploitation;

        return $this;
    }

    /**
     * Remove apiculteurExploitations
     *
     * @param ApiculteurExploitation $apiculteurExploitation
     */
    public function removeApiculteurExploitation(ApiculteurExploitation $apiculteurExploitation)
    {
        $this->apiculteurExploitations->removeElement($apiculteurExploitation);
    }

    /**
     * Get apiculteurExploitations
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getApiculteurExploitations()
    {
        return $this->apiculteurExploitations;
    }

    /**
     * Add ruchers
     *
     * @param Rucher $rucher
     * @return Exploitation
     */
    public function addRucher(Rucher $rucher)
    {
        $this->ruchers[] = $rucher;

        return $this;
    }

    /**
     * Remove ruchers
     *
     * @param Rucher $rucher
     */
    public function removeRucher(Rucher $rucher)
    {
        $this->ruchers->removeElement($rucher);
    }

    /**
     * Get ruchers
     *
     * @return \Doctrine\Common\Collections\Collection 
     */
    public function getRuchers()
    {
        return $this->ruchers;
    }
}
